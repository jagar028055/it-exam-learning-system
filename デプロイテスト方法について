【最終レポート】

────────────────────────────────
1. 500 エラーの主な原因
────────────────────────────────
1) ランタイム例外  
   ・Null/undefined 参照、未捕捉の Promise rejection などコード起因。

2) 外部サービス／DB 接続失敗  
   ・環境変数の漏れ・資格情報ミス・タイムアウト。

3) スリープ復帰タイムアウト（Render Free 特有）  
   ・15 分アイドル後の Cold-Start が完了する前にリクエストが入り 500 返却。

4) メモリ 256 MB 制限超過  
   ・大量データをメモリ保持 → OOM Killer がプロセスを落とし 500。

5) ビルド・マイグレーション不整合  
   ・デプロイ直後に DB スキーマが最新になっておらず例外発生。

────────────────────────────────
2. 解決策の種類（一覧＋一言解説）
────────────────────────────────
A) 詳細ログ出力  
   - request_id・stacktrace を標準出力に出して Render Logs で確認。

B) 外形監視＋ヘルスチェック  
   - `/healthz` を 200 で返しておき GitHub Actions で 15 分ごとに ping。

C) プレビュー環境 (Render Pull-Request Preview)  
   - 本番に出る前に 5xx を検出できる。

D) AI による再現テスト生成  
   - Claude にログを渡し “最小 reproduction test” を Jest で自動生成。

E) AI パッチ生成＆自動 PR  
   - Claude が diff を出力 → GitHub CLI で貼り付け → CI がテスト。

F) CI 自動マージ & デプロイ  
   - テスト緑なら main へ自動マージ → Render が即デプロイ。

G) ログ自動スキャン → Issue 起票  
   - GitHub Actions が `grep 500` を検知し bot で Issue 作成。

H) 手動ロールバック (Render)  
   - デプロイ 2 世代保持、ワンクリックで前バージョンに戻せる。

────────────────────────────────
3. ご提示条件下での最善案
────────────────────────────────
「Claude Pro だけ課金・その他はすべて無料枠」で  
a) 手動作業を“ログドラッグ＋diffコピペ”程度に抑える  
b) Render Free のスリープ問題にも対処  
c) 障害→修正→再発防止までワンパス自動化  
を同時に満たすフロー。

────────────────────────────────
4. 最善案の詳細フロー
────────────────────────────────
STEP 0  初期セットアップ（1 回だけ）
  0-1 `/healthz` ルートを実装して 200 を返す  
  0-2 `render.yaml` に  
       ```
       autodeploy: yes
       numDeploysToRetain: 2
       ```
  0-3 GitHub Secrets に `RENDER_API_KEY` と `RENDER_SERVICE_ID` を登録  
  0-4 `.github/workflows/ci.yml` を配置（下記参照）

STEP 1  CI / スリープ阻止
  ・GitHub Actions が  
    ├ push 時: test → build → Render へデプロイ  
    └ cron(*/15 min): `curl https://<app>/healthz` で warm-up

STEP 2  障害検知
  ・Render CLI を別ターミナルで  
    `render logs -f $SERVICE_ID > latest.log`  
  ・GitHub Actions 夜間ジョブが `grep " 500 "` でヒットしたら  
    `gh issue create` で “500 detected” を自動起票

STEP 3  原因解析 & 再現コード
  3-1 Claude Pro に `latest.log` と該当ソース数ファイルをアップロード  
  3-2 プロンプト  
      「この 500 の原因関数を特定し、最小 Jest テストと修正パッチを生成」  
  3-3 Claude が `repro.test.js` と `patch.diff` を返す

STEP 4  パッチ適用～本番反映
  ```
  echo "$PATCH_DIFF" | git apply -
  git checkout -b fix/claude-auto
  git commit -am "fix: 500 hot-patch"
  gh pr create -t "Auto patch" -b "Generated by Claude"
  ```
  ・CI がテスト緑→auto-merge → Render が新デプロイ  
  ・新デプロイで `/healthz` OK & `grep 500` 無しなら完了

STEP 5  定期レポート
  ・夜間 GitHub Actions が 24h ログを Claude に送り  
    「5xx/4xx ランキングと改善 TODO」を要約 → Issue コメントへ投稿  
  ・翌朝読むだけで改善ポイントを把握

────────────────────────────────
5. タスクリスト（チェックボックス付き）
────────────────────────────────
[ ] `/healthz` ルートを追加し push  
[ ] `render.yaml` に autodeploy / numDeploysToRetain 設定  
[ ] Render CLI インストール & API Key 発行  
[ ] GitHub Secrets (`RENDER_API_KEY`, `RENDER_SERVICE_ID`) 登録  
[ ] `.github/workflows/ci.yml` を追加  
[ ] ログ追跡用 `render logs -f` を常時実行 or tmux に残す  
[ ] Claude にログ＋ソースをアップできるよう共有フォルダ準備  
[ ] PR auto-merge オプションを GitHub で有効化  
[ ] 夜間ジョブ用 `analysis.yml`（ログ→Claude→Issue）を配置  
[ ] 初回エラー発生時に手順 STEP 3～4 を試行し動作確認  

以上で「Render Free ＋ Claude Pro だけでほぼ全自動」な 500 エラー対策が完成します。

情報源
